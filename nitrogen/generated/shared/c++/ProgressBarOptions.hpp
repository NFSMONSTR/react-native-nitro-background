///
/// ProgressBarOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::nitrobackground {

  /**
   * A struct which can be represented as a JavaScript object (ProgressBarOptions).
   */
  struct ProgressBarOptions {
  public:
    double max     SWIFT_PRIVATE;
    double value     SWIFT_PRIVATE;
    std::optional<bool> indeterminate     SWIFT_PRIVATE;

  public:
    ProgressBarOptions() = default;
    explicit ProgressBarOptions(double max, double value, std::optional<bool> indeterminate): max(max), value(value), indeterminate(indeterminate) {}
  };

} // namespace margelo::nitro::nitrobackground

namespace margelo::nitro {

  using namespace margelo::nitro::nitrobackground;

  // C++ ProgressBarOptions <> JS ProgressBarOptions (object)
  template <>
  struct JSIConverter<ProgressBarOptions> final {
    static inline ProgressBarOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ProgressBarOptions(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "max")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "value")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "indeterminate"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ProgressBarOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "max", JSIConverter<double>::toJSI(runtime, arg.max));
      obj.setProperty(runtime, "value", JSIConverter<double>::toJSI(runtime, arg.value));
      obj.setProperty(runtime, "indeterminate", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.indeterminate));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "max"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "value"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "indeterminate"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
