///
/// NitroBackgroundNotificationOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `TaskIconOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct TaskIconOptions; }
// Forward declaration of `ProgressBarOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct ProgressBarOptions; }

#include <optional>
#include <string>
#include "TaskIconOptions.hpp"
#include "ProgressBarOptions.hpp"

namespace margelo::nitro::nitrobackground {

  /**
   * A struct which can be represented as a JavaScript object (NitroBackgroundNotificationOptions).
   */
  struct NitroBackgroundNotificationOptions {
  public:
    std::optional<std::string> channelName     SWIFT_PRIVATE;
    std::optional<std::string> channelDescription     SWIFT_PRIVATE;
    std::optional<std::string> channelId     SWIFT_PRIVATE;
    std::optional<std::string> taskTitle     SWIFT_PRIVATE;
    std::optional<std::string> taskDesc     SWIFT_PRIVATE;
    std::optional<TaskIconOptions> taskIcon     SWIFT_PRIVATE;
    std::optional<std::string> color     SWIFT_PRIVATE;
    std::optional<std::string> linkingURI     SWIFT_PRIVATE;
    std::optional<ProgressBarOptions> progressBar     SWIFT_PRIVATE;

  public:
    NitroBackgroundNotificationOptions() = default;
    explicit NitroBackgroundNotificationOptions(std::optional<std::string> channelName, std::optional<std::string> channelDescription, std::optional<std::string> channelId, std::optional<std::string> taskTitle, std::optional<std::string> taskDesc, std::optional<TaskIconOptions> taskIcon, std::optional<std::string> color, std::optional<std::string> linkingURI, std::optional<ProgressBarOptions> progressBar): channelName(channelName), channelDescription(channelDescription), channelId(channelId), taskTitle(taskTitle), taskDesc(taskDesc), taskIcon(taskIcon), color(color), linkingURI(linkingURI), progressBar(progressBar) {}
  };

} // namespace margelo::nitro::nitrobackground

namespace margelo::nitro {

  using namespace margelo::nitro::nitrobackground;

  // C++ NitroBackgroundNotificationOptions <> JS NitroBackgroundNotificationOptions (object)
  template <>
  struct JSIConverter<NitroBackgroundNotificationOptions> final {
    static inline NitroBackgroundNotificationOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroBackgroundNotificationOptions(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "channelName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "channelDescription")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "channelId")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "taskTitle")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "taskDesc")),
        JSIConverter<std::optional<TaskIconOptions>>::fromJSI(runtime, obj.getProperty(runtime, "taskIcon")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "color")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "linkingURI")),
        JSIConverter<std::optional<ProgressBarOptions>>::fromJSI(runtime, obj.getProperty(runtime, "progressBar"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroBackgroundNotificationOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "channelName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.channelName));
      obj.setProperty(runtime, "channelDescription", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.channelDescription));
      obj.setProperty(runtime, "channelId", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.channelId));
      obj.setProperty(runtime, "taskTitle", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.taskTitle));
      obj.setProperty(runtime, "taskDesc", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.taskDesc));
      obj.setProperty(runtime, "taskIcon", JSIConverter<std::optional<TaskIconOptions>>::toJSI(runtime, arg.taskIcon));
      obj.setProperty(runtime, "color", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.color));
      obj.setProperty(runtime, "linkingURI", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.linkingURI));
      obj.setProperty(runtime, "progressBar", JSIConverter<std::optional<ProgressBarOptions>>::toJSI(runtime, arg.progressBar));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "channelName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "channelDescription"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "channelId"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "taskTitle"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "taskDesc"))) return false;
      if (!JSIConverter<std::optional<TaskIconOptions>>::canConvert(runtime, obj.getProperty(runtime, "taskIcon"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "color"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "linkingURI"))) return false;
      if (!JSIConverter<std::optional<ProgressBarOptions>>::canConvert(runtime, obj.getProperty(runtime, "progressBar"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
