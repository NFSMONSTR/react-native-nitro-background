///
/// JNitroBackgroundNotificationOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroBackgroundNotificationOptions.hpp"

#include "JProgressBarOptions.hpp"
#include "JTaskIconOptions.hpp"
#include "ProgressBarOptions.hpp"
#include "TaskIconOptions.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::nitrobackground {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroBackgroundNotificationOptions" and the the Kotlin data class "NitroBackgroundNotificationOptions".
   */
  struct JNitroBackgroundNotificationOptions final: public jni::JavaClass<JNitroBackgroundNotificationOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nfsmonstr/nitrobackground/NitroBackgroundNotificationOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroBackgroundNotificationOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroBackgroundNotificationOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldTaskTitle = clazz->getField<jni::JString>("taskTitle");
      jni::local_ref<jni::JString> taskTitle = this->getFieldValue(fieldTaskTitle);
      static const auto fieldTaskDesc = clazz->getField<jni::JString>("taskDesc");
      jni::local_ref<jni::JString> taskDesc = this->getFieldValue(fieldTaskDesc);
      static const auto fieldTaskIcon = clazz->getField<JTaskIconOptions>("taskIcon");
      jni::local_ref<JTaskIconOptions> taskIcon = this->getFieldValue(fieldTaskIcon);
      static const auto fieldColor = clazz->getField<jni::JString>("color");
      jni::local_ref<jni::JString> color = this->getFieldValue(fieldColor);
      static const auto fieldLinkingURI = clazz->getField<jni::JString>("linkingURI");
      jni::local_ref<jni::JString> linkingURI = this->getFieldValue(fieldLinkingURI);
      static const auto fieldProgressBar = clazz->getField<JProgressBarOptions>("progressBar");
      jni::local_ref<JProgressBarOptions> progressBar = this->getFieldValue(fieldProgressBar);
      return NitroBackgroundNotificationOptions(
        taskTitle != nullptr ? std::make_optional(taskTitle->toStdString()) : std::nullopt,
        taskDesc != nullptr ? std::make_optional(taskDesc->toStdString()) : std::nullopt,
        taskIcon != nullptr ? std::make_optional(taskIcon->toCpp()) : std::nullopt,
        color != nullptr ? std::make_optional(color->toStdString()) : std::nullopt,
        linkingURI != nullptr ? std::make_optional(linkingURI->toStdString()) : std::nullopt,
        progressBar != nullptr ? std::make_optional(progressBar->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroBackgroundNotificationOptions::javaobject> fromCpp(const NitroBackgroundNotificationOptions& value) {
      return newInstance(
        value.taskTitle.has_value() ? jni::make_jstring(value.taskTitle.value()) : nullptr,
        value.taskDesc.has_value() ? jni::make_jstring(value.taskDesc.value()) : nullptr,
        value.taskIcon.has_value() ? JTaskIconOptions::fromCpp(value.taskIcon.value()) : nullptr,
        value.color.has_value() ? jni::make_jstring(value.color.value()) : nullptr,
        value.linkingURI.has_value() ? jni::make_jstring(value.linkingURI.value()) : nullptr,
        value.progressBar.has_value() ? JProgressBarOptions::fromCpp(value.progressBar.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrobackground
