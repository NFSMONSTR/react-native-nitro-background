///
/// JHybridNitroBackgroundSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroBackgroundSpec.hpp"

// Forward declaration of `NitroBackgroundNotificationOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct NitroBackgroundNotificationOptions; }
// Forward declaration of `TaskIconOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct TaskIconOptions; }
// Forward declaration of `ProgressBarOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct ProgressBarOptions; }

#include <string>
#include "NitroBackgroundNotificationOptions.hpp"
#include "JNitroBackgroundNotificationOptions.hpp"
#include <optional>
#include "TaskIconOptions.hpp"
#include "JTaskIconOptions.hpp"
#include "ProgressBarOptions.hpp"
#include "JProgressBarOptions.hpp"
#include <functional>
#include "JFunc_void.hpp"

namespace margelo::nitro::nitrobackground {

  jni::local_ref<JHybridNitroBackgroundSpec::jhybriddata> JHybridNitroBackgroundSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroBackgroundSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroBackgroundSpec::initHybrid),
    });
  }

  size_t JHybridNitroBackgroundSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridNitroBackgroundSpec::start(const std::string& taskKey, const NitroBackgroundNotificationOptions& notificationOptions, const std::optional<std::function<void()>>& onExpire) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* taskKey */, jni::alias_ref<JNitroBackgroundNotificationOptions> /* notificationOptions */, jni::alias_ref<JFunc_void::javaobject> /* onExpire */)>("start_cxx");
    method(_javaPart, jni::make_jstring(taskKey), JNitroBackgroundNotificationOptions::fromCpp(notificationOptions), onExpire.has_value() ? JFunc_void_cxx::fromCpp(onExpire.value()) : nullptr);
  }
  void JHybridNitroBackgroundSpec::updateNotification(const std::string& taskKey, const NitroBackgroundNotificationOptions& options) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* taskKey */, jni::alias_ref<JNitroBackgroundNotificationOptions> /* options */)>("updateNotification");
    method(_javaPart, jni::make_jstring(taskKey), JNitroBackgroundNotificationOptions::fromCpp(options));
  }
  void JHybridNitroBackgroundSpec::stop(const std::string& taskKey) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* taskKey */)>("stop");
    method(_javaPart, jni::make_jstring(taskKey));
  }

} // namespace margelo::nitro::nitrobackground
