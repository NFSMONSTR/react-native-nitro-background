///
/// HybridNitroBackgroundSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroBackgroundSpec.hpp"

// Forward declaration of `HybridNitroBackgroundSpec_cxx` to properly resolve imports.
namespace NitroBackground { class HybridNitroBackgroundSpec_cxx; }

// Forward declaration of `NitroBackgroundNotificationOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct NitroBackgroundNotificationOptions; }
// Forward declaration of `TaskIconOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct TaskIconOptions; }
// Forward declaration of `ProgressBarOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct ProgressBarOptions; }

#include <string>
#include "NitroBackgroundNotificationOptions.hpp"
#include <optional>
#include "TaskIconOptions.hpp"
#include "ProgressBarOptions.hpp"
#include <functional>

#include "NitroBackground-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrobackground {

  /**
   * The C++ part of HybridNitroBackgroundSpec_cxx.swift.
   *
   * HybridNitroBackgroundSpecSwift (C++) accesses HybridNitroBackgroundSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroBackgroundSpec_cxx can directly inherit from the C++ class HybridNitroBackgroundSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroBackgroundSpecSwift: public virtual HybridNitroBackgroundSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroBackgroundSpecSwift(const NitroBackground::HybridNitroBackgroundSpec_cxx& swiftPart):
      HybridObject(HybridNitroBackgroundSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroBackground::HybridNitroBackgroundSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void start(const std::string& taskKey, const NitroBackgroundNotificationOptions& notificationOptions, const std::optional<std::function<void()>>& onExpire) override {
      auto __result = _swiftPart.start(taskKey, notificationOptions, onExpire);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void updateNotification(const std::string& taskKey, const NitroBackgroundNotificationOptions& options) override {
      auto __result = _swiftPart.updateNotification(taskKey, options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void stop(const std::string& taskKey) override {
      auto __result = _swiftPart.stop(taskKey);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroBackground::HybridNitroBackgroundSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrobackground
