///
/// ProgressBarOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `ProgressBarOptions`, backed by a C++ struct.
 */
public typealias ProgressBarOptions = margelo.nitro.nitrobackground.ProgressBarOptions

public extension ProgressBarOptions {
  private typealias bridge = margelo.nitro.nitrobackground.bridge.swift

  /**
   * Create a new instance of `ProgressBarOptions`.
   */
  init(max: Double, value: Double, indeterminate: Bool?) {
    self.init(max, value, { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = indeterminate {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var max: Double {
    @inline(__always)
    get {
      return self.__max
    }
    @inline(__always)
    set {
      self.__max = newValue
    }
  }
  
  var value: Double {
    @inline(__always)
    get {
      return self.__value
    }
    @inline(__always)
    set {
      self.__value = newValue
    }
  }
  
  var indeterminate: Bool? {
    @inline(__always)
    get {
      return self.__indeterminate.value
    }
    @inline(__always)
    set {
      self.__indeterminate = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
