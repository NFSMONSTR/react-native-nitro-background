///
/// NitroBackground-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroBackgroundSpec` to properly resolve imports.
namespace margelo::nitro::nitrobackground { class HybridNitroBackgroundSpec; }
// Forward declaration of `ProgressBarOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct ProgressBarOptions; }
// Forward declaration of `TaskIconOptions` to properly resolve imports.
namespace margelo::nitro::nitrobackground { struct TaskIconOptions; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroBackgroundSpec_cxx` to properly resolve imports.
namespace NitroBackground { class HybridNitroBackgroundSpec_cxx; }

// Include C++ defined types
#include "HybridNitroBackgroundSpec.hpp"
#include "ProgressBarOptions.hpp"
#include "TaskIconOptions.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrobackground::bridge::swift {

  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::optional<TaskIconOptions>
  /**
   * Specialized version of `std::optional<TaskIconOptions>`.
   */
  using std__optional_TaskIconOptions_ = std::optional<TaskIconOptions>;
  inline std::optional<TaskIconOptions> create_std__optional_TaskIconOptions_(const TaskIconOptions& value) {
    return std::optional<TaskIconOptions>(value);
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::optional<ProgressBarOptions>
  /**
   * Specialized version of `std::optional<ProgressBarOptions>`.
   */
  using std__optional_ProgressBarOptions_ = std::optional<ProgressBarOptions>;
  inline std::optional<ProgressBarOptions> create_std__optional_ProgressBarOptions_(const ProgressBarOptions& value) {
    return std::optional<ProgressBarOptions>(value);
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_shared<std::function<void()>>(std::move(func))) {}
    inline void call() const {
      _function->operator()();
    }
  private:
    std::shared_ptr<std::function<void()>> _function;
  };
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Wrapper wrap_Func_void(Func_void value) {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void()>>
  /**
   * Specialized version of `std::optional<std::function<void()>>`.
   */
  using std__optional_std__function_void____ = std::optional<std::function<void()>>;
  inline std::optional<std::function<void()>> create_std__optional_std__function_void____(const std::function<void()>& value) {
    return std::optional<std::function<void()>>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitrobackground::HybridNitroBackgroundSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitrobackground::HybridNitroBackgroundSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitrobackground__HybridNitroBackgroundSpec_ = std::shared_ptr<margelo::nitro::nitrobackground::HybridNitroBackgroundSpec>;
  std::shared_ptr<margelo::nitro::nitrobackground::HybridNitroBackgroundSpec> create_std__shared_ptr_margelo__nitro__nitrobackground__HybridNitroBackgroundSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitrobackground__HybridNitroBackgroundSpec_(std__shared_ptr_margelo__nitro__nitrobackground__HybridNitroBackgroundSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitrobackground::HybridNitroBackgroundSpec>
  using std__weak_ptr_margelo__nitro__nitrobackground__HybridNitroBackgroundSpec_ = std::weak_ptr<margelo::nitro::nitrobackground::HybridNitroBackgroundSpec>;
  inline std__weak_ptr_margelo__nitro__nitrobackground__HybridNitroBackgroundSpec_ weakify_std__shared_ptr_margelo__nitro__nitrobackground__HybridNitroBackgroundSpec_(const std::shared_ptr<margelo::nitro::nitrobackground::HybridNitroBackgroundSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::nitrobackground::bridge::swift
